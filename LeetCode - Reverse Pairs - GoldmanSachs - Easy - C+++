 int ans;
    void mergeSort(vector<int>& nums, int low, int mid, int end){
        int i = low;
        int j = mid + 1;
        while(i <= mid && j <= end){
            if((long)nums[i] > (long)2*nums[j]){
                ans += (mid - i) + 1;
                j++;
            }else{
                i++;
            }
        }
        sort(nums.begin() + low, nums.begin() + end + 1);
    }
    
    void merge(vector<int>& nums, int a, int b){
        if(a == b){
            return;
        }
        int mid = a + (b - a)/2;
        merge(nums, a, mid);
        merge(nums, mid + 1, b);
        mergeSort(nums, a, mid, b);
    }
    
    int reversePairs(vector<int>& nums){
        int i = 0;
        int h = nums.size() - 1;
        if(h == 0){
            return 0;
        }
        ans = 0;
        merge(nums, i, h);
        return ans;
    }
